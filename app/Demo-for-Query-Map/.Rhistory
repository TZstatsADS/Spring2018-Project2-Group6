head(RentData)
RentData$Zipcode <- as.numeric(tapply(RentDataOri$ZipCode, RentDataOri$Address, mean))
head(RentData)
write.csv(RentData, "house_v4.2_unique.csv")
Total <- rbind(CrimeData, RentData)
write.csv(Total,"QueryMapData_v1.2.csv")
CrimeDataOri <- read.csv("crime_clean.csv")
#Sample <- sample(1:10, nrow(CrimeData), replace = TRUE)
#CrimeData <- CrimeData[which(Sample == 1),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$OFNS_DESC),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$Latitude),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$Longitude),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$LAW_CAT_CD),]
CrimeData <- CrimeDataOri[,c(5,6,1,4,3,1,1,1,7)]
names(CrimeData) <- c("longitude","latitude","Type1","Type2","Type3","Value","Icon","Remark", "Zipcode")
# All type1 <- Crime; All Value <- NA; All Icon <- Type2; Remark <- Type3
CrimeData$Type3 <- as.character(CrimeData$Type3)
i <- 1;
now <- 0;
while (i < nrow(CrimeDataOri))
{
for (j in (i+1): (nrow(CrimeDataOri)))
{
if ((CrimeDataOri$Longitude[j] < CrimeDataOri$Longitude[i] - 0.00001 |
CrimeDataOri$Longitude[j] > CrimeDataOri$Longitude[i] + 0.00001) &
(CrimeDataOri$Latitude[j] < CrimeDataOri$Latitude[i] - 0.00001 |
CrimeDataOri$Latitude[j] > CrimeDataOri$Latitude[i] + 0.00001))
{
now <- now +1
CrimeData[now, c("longitude","latitude","Type2")] <-
CrimeDataOri[i,c("Longitude","Latitude","LAW_CAT_CD")]
CrimeData[now, "Type3"] <- paste(CrimeDataOri$OFNS_DESC[i:(j-1)], collapse=", ", sep = "")
CrimeData[now, "Value"] <- j - i
i <- j
break
}
if (j >= nrow(CrimeDataOri))
{
i <- j
break
}
}
}
CrimeData <- CrimeData[1:now,]
CrimeData$Type1 <- rep("Crime",nrow(CrimeData))
CrimeData$Icon <- CrimeData$Type2
CrimeData$Remark <- CrimeData$Type3
Total <- rbind(CrimeData, RentData)
write.csv(Total,"QueryMapData_v1.3.csv")
head(CrimeData$Remark)
A <- c("AA","AA","AB","AA","AC","AB","AC","B")
table(A)
length(table(A))
names(table(A)[2])
(table(A)[2])
as.numeric(table(A)[2])
GetRemark <- function(x)
{
str <- table(x)
ans <- NA
for (i in 1:length(str))
{
ans <- paste(ans, ", ", names(str[i]), ": X", as.numeric(str[i]), sep = "")
}
return(ans)
}
A <- c("AA","AA","AB","AA","AC","AB","AC","B")
GetRemark(A[1:7])
GetRemark <- function(x)
{
str <- table(x)
ans <- ""
for (i in 1:length(str))
{
ans <- paste(ans, ", ", names(str[i]), ": X", as.numeric(str[i]), sep = "")
}
return(ans)
}
A <- c("AA","AA","AB","AA","AC","AB","AC","B")
GetRemark(A[1:7])
GetRemark <- function(x)
{
str <- table(x)
ans <- ""
for (i in 1:length(str))
{
ans <- paste(ans, names(str[i]), ": X", as.numeric(str[i]), "\n", sep = "")
}
return(ans)
}
A <- c("AA","AA","AB","AA","AC","AB","AC","B")
GetRemark(A[1:7])
GetRemark <- function(x)
{
str <- table(x)
ans <- ""
for (i in 1:length(str))
{
ans <- paste(ans, names(str[i]), ": X", as.numeric(str[i]), "<br>", sep = "")
}
return(ans)
}
A <- c("AA","AA","AB","AA","AC","AB","AC","B")
GetRemark(A[1:7])
GetRemark <- function(x)
{
str <- table(x)
ans <- ""
for (i in 1:length(str))
{
ans <- cat(ans, names(str[i]), ": X", as.numeric(str[i]), "<br>", sep = "")
}
return(ans)
}
A <- c("AA","AA","AB","AA","AC","AB","AC","B")
GetRemark(A[1:7])
GetRemark <- function(x)
{
str <- table(x)
ans <- ""
for (i in 1:length(str))
{
ans <- cat(ans, names(str[i]), ": X", as.numeric(str[i]), "\n", sep = "")
}
return(ans)
}
A <- c("AA","AA","AB","AA","AC","AB","AC","B")
GetRemark(A[1:7])
GetRemark(A[1:2])
GetRemark(A[1:7])
i=1
ans <- ""
ans <- cat(ans, names(str[i]), ": X", as.numeric(str[i]), "\n", sep = "")
str <- table(A[1:7])
str
length(str)
ans <- cat(ans, names(str[i]), ": X", as.numeric(str[i]), "\n", sep = "")
ans
i=2
ans <- cat(ans, names(str[i]), ": X", as.numeric(str[i]), "\n", sep = "")
ans
t
GetRemark <- function(x)
{
str <- table(x)
ans <- ""
for (i in 1:length(str))
{
ans <- paste(ans, names(str[i]), ": X", as.numeric(str[i]), "\n", sep = "")
}
return(ans)
}
A <- c("AA","AA","AB","AA","AC","AB","AC","B")
cat(GetRemark(A[1:7]))
GetRemark(A[1:7])
CrimeDataOri <- read.csv("crime_clean.csv")
#Sample <- sample(1:10, nrow(CrimeData), replace = TRUE)
#CrimeData <- CrimeData[which(Sample == 1),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$OFNS_DESC),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$Latitude),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$Longitude),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$LAW_CAT_CD),]
CrimeData <- CrimeDataOri[,c(5,6,1,4,3,1,1,1,7)]
names(CrimeData) <- c("longitude","latitude","Type1","Type2","Type3","Value","Icon","Remark", "Zipcode")
# All type1 <- Crime; All Value <- NA; All Icon <- Type2; Remark <- Type3
CrimeData$Type3 <- as.character(CrimeData$Type3)
i <- 1;
now <- 0;
while (i < nrow(CrimeDataOri))
{
for (j in (i+1): (nrow(CrimeDataOri)))
{
if ((CrimeDataOri$Longitude[j] < CrimeDataOri$Longitude[i] - 0.00001 |
CrimeDataOri$Longitude[j] > CrimeDataOri$Longitude[i] + 0.00001) &
(CrimeDataOri$Latitude[j] < CrimeDataOri$Latitude[i] - 0.00001 |
CrimeDataOri$Latitude[j] > CrimeDataOri$Latitude[i] + 0.00001))
{
now <- now +1
CrimeData[now, c("longitude","latitude","Type2")] <-
CrimeDataOri[i,c("Longitude","Latitude","LAW_CAT_CD")]
CrimeData[now, "Type3"] <- paste(CrimeDataOri$OFNS_DESC[i:(j-1)], collapse=", ", sep = "")
CrimeData[now,"Remark"] <- GetRemark(CrimeDataOri$OFNS_DESC[i:(j-1)])
CrimeData[now, "Value"] <- j - i
i <- j
break
}
if (j >= nrow(CrimeDataOri))
{
i <- j
break
}
}
}
CrimeData <- CrimeData[1:now,]
CrimeData$Type1 <- rep("Crime",nrow(CrimeData))
CrimeData$Icon <- CrimeData$Type2
head(CrimeData)
CrimeData$Remark[1]
i <- 1;
now <- 0;
while (i < 2)
{
for (j in (i+1): (nrow(CrimeDataOri)))
{
if ((CrimeDataOri$Longitude[j] < CrimeDataOri$Longitude[i] - 0.00001 |
CrimeDataOri$Longitude[j] > CrimeDataOri$Longitude[i] + 0.00001) &
(CrimeDataOri$Latitude[j] < CrimeDataOri$Latitude[i] - 0.00001 |
CrimeDataOri$Latitude[j] > CrimeDataOri$Latitude[i] + 0.00001))
{
now <- now +1
CrimeData[now, c("longitude","latitude","Type2")] <-
CrimeDataOri[i,c("Longitude","Latitude","LAW_CAT_CD")]
CrimeData[now, "Type3"] <- paste(CrimeDataOri$OFNS_DESC[i:(j-1)], collapse=", ", sep = "")
CrimeData[now,"Remark"] <- GetRemark(CrimeDataOri$OFNS_DESC[i:(j-1)])
CrimeData[now, "Value"] <- j - i
i <- j
break
}
if (j >= nrow(CrimeDataOri))
{
i <- j
break
}
}
}
CrimeData$Remark[1]
CrimeData
CrimeData[1,]
GetRemark(CrimeDataOri$OFNS_DESC[1:(2)])
CrimeDataOri$OFNS_DESC[1:(2)]
table(CrimeDataOri$OFNS_DESC[1:2])
GetRemark <- function(x)
{
str <- as.character(x)
str <- table(str)
ans <- ""
for (i in 1:length(str))
{
ans <- paste(ans, names(str[i]), ": X", as.numeric(str[i]), "\n", sep = "")
}
return(ans)
}
GetRemark(CrimeDataOri$OFNS_DESC[1:(2)])
GetRemark <- function(x)
{
str <- as.character(x)
str <- table(str)
ans <- ""
for (i in 1:length(str))
{
ans <- paste(ans, names(str[i]), ": X", as.numeric(str[i]), "; ", sep = "")
}
return(ans)
}
CrimeData <- CrimeDataOri[,c(5,6,1,4,3,1,1,1,7)]
names(CrimeData) <- c("longitude","latitude","Type1","Type2","Type3","Value","Icon","Remark", "Zipcode")
# All type1 <- Crime; All Value <- NA; All Icon <- Type2; Remark <- Type3
CrimeData$Type3 <- as.character(CrimeData$Type3)
i <- 1;
now <- 0;
while (i < nrow(CrimeDataOri))
{
for (j in (i+1): (nrow(CrimeDataOri)))
{
if ((CrimeDataOri$Longitude[j] < CrimeDataOri$Longitude[i] - 0.00001 |
CrimeDataOri$Longitude[j] > CrimeDataOri$Longitude[i] + 0.00001) &
(CrimeDataOri$Latitude[j] < CrimeDataOri$Latitude[i] - 0.00001 |
CrimeDataOri$Latitude[j] > CrimeDataOri$Latitude[i] + 0.00001))
{
now <- now +1
CrimeData[now, c("longitude","latitude","Type2")] <-
CrimeDataOri[i,c("Longitude","Latitude","LAW_CAT_CD")]
CrimeData[now, "Type3"] <- paste(CrimeDataOri$OFNS_DESC[i:(j-1)], collapse=", ", sep = "")
CrimeData[now,"Remark"] <- GetRemark(CrimeDataOri$OFNS_DESC[i:(j-1)])
CrimeData[now, "Value"] <- j - i
i <- j
break
}
if (j >= nrow(CrimeDataOri))
{
i <- j
break
}
}
}
CrimeData$Remark[1:5]
CrimeData$Remark[1:50]
CrimeData <- CrimeData[1:now,]
CrimeData$Type1 <- rep("Crime",nrow(CrimeData))
CrimeData$Icon <- CrimeData$Type2
head(RentData)
Total <- rbind(CrimeData, RentData)
write.csv(Total,"QueryMapData_v2.0.csv")
getwd()
shiny::runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo for Query Map')
setwd("/Users/zx.xue/Documents/GitHub/Spring2018-Project2-group6/app/Demo for Query Map")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
GetRemark <- function(x)
{
str <- as.character(x)
str <- table(str)
ans <- ""
for (i in 1:length(str))
{
ans <- paste(ans, names(str[i]), ": X", as.numeric(str[i]), "<br/>", sep = "")
}
return(ans)
}
CrimeDataOri <- read.csv("crime_clean.csv")
#Sample <- sample(1:10, nrow(CrimeData), replace = TRUE)
#CrimeData <- CrimeData[which(Sample == 1),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$OFNS_DESC),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$Latitude),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$Longitude),]
CrimeDataOri <- CrimeDataOri[order(CrimeDataOri$LAW_CAT_CD),]
CrimeData <- CrimeDataOri[,c(5,6,1,4,3,1,1,1,7)]
names(CrimeData) <- c("longitude","latitude","Type1","Type2","Type3","Value","Icon","Remark", "Zipcode")
# All type1 <- Crime; All Value <- NA; All Icon <- Type2; Remark <- Type3
CrimeData$Type3 <- as.character(CrimeData$Type3)
i <- 1;
now <- 0;
while (i < nrow(CrimeDataOri))
{
for (j in (i+1): (nrow(CrimeDataOri)))
{
if ((CrimeDataOri$Longitude[j] < CrimeDataOri$Longitude[i] - 0.00001 |
CrimeDataOri$Longitude[j] > CrimeDataOri$Longitude[i] + 0.00001) &
(CrimeDataOri$Latitude[j] < CrimeDataOri$Latitude[i] - 0.00001 |
CrimeDataOri$Latitude[j] > CrimeDataOri$Latitude[i] + 0.00001))
{
now <- now +1
CrimeData[now, c("longitude","latitude","Type2")] <-
CrimeDataOri[i,c("Longitude","Latitude","LAW_CAT_CD")]
CrimeData[now, "Type3"] <- paste(CrimeDataOri$OFNS_DESC[i:(j-1)], collapse=", ", sep = "")
CrimeData[now,"Remark"] <- GetRemark(CrimeDataOri$OFNS_DESC[i:(j-1)])
CrimeData[now, "Value"] <- j - i
i <- j
break
}
if (j >= nrow(CrimeDataOri))
{
i <- j
break
}
}
}
CrimeData <- CrimeData[1:now,]
CrimeData$Type1 <- rep("Crime",nrow(CrimeData))
CrimeData$Icon <- CrimeData$Type2
Total <- rbind(CrimeData, RentData)
write.csv(Total,"QueryMapData_v2.1.csv")
runApp()
Total <- read.csv("QueryMapData_v2.1.csv")
Subway <- read.csv("NYC_subway.csv")
head(Total)
Total <- Total[,-1]
head(Total)
head(Subway)
Subway$Remark <- paste(Subway$Line, " - ",Subway$Station.Name, "<br/>")
head(Subway)
head(Subway)
Subway$Remark <- ifelse(Subway$Entry == "YES",
paste(Subway$Line, " - ",Subway$Station.Name, "<br/>"),
paste("Exit Only!<br/>", Subway$Line, " - ",Subway$Station.Name, "<br/>"))
head(Subway)
Subway$Remark
head(Subway)
Subway <- Subway(,c("Entrance.Longitude","Entrance.Latitude","Remark"))
Subway <- Subway[,c("Entrance.Longitude","Entrance.Latitude","Remark")]
head(Subway)
Subway$Type1 <- rep("Subway",nrow(Subway))
Subway$Type2 <- rep(NA,nrow(Subway))
Subway$Type3 <- rep(NA,nrow(Subway))
Subway$Value <- rep(NA,nrow(Subway))
Subway$Icon <- rep("Subway",nrow(Subway))
Subway$Zipcode <- rep(NA,nrow(Subway))
head(Subway)
Subway <- Subway[,c(1,2,4,5,6,7,8,3,9)]
Total <- rbind(Total, Subway)
head(Subway)
names(Subway)[c(1,2)] <- c("Longitude","Latitude")
Total <- rbind(Total, Subway)
head(Subway)
head(Total)
names(Subway)[c(1,2)] <- c("longitude","latitude")
Total <- rbind(Total, Subway)
write.csv(Total,"QueryMapData_v2.2.csv")
runApp()
runApp()
runApp()
Subway <- read.csv("NYC_subway.csv")
head(Subway)
Subway <- Subway[,c(2,3,4,5)]
head(Subway)
Subway <- unique(Subway)
head(Subway)
head(Subway)
Subway$Remark <- paste(Subway$Line, " - ",Subway$Station.Name, "<br/>")
Subway <- Subway[,c("Entrance.Longitude","Entrance.Latitude","Remark")]
Subway <- Subway[,c("Station.Longitude","Station.Latitude","Remark")]
Subway$Type1 <- rep("Subway",nrow(Subway))
Subway$Type2 <- rep(NA,nrow(Subway))
Subway$Type3 <- rep(NA,nrow(Subway))
Subway$Value <- rep(NA,nrow(Subway))
Subway$Icon <- rep("Subway",nrow(Subway))
Subway$Zipcode <- rep(NA,nrow(Subway))
Subway <- Subway[,c(1,2,4,5,6,7,8,3,9)]
names(Subway)[c(1,2)] <- c("longitude","latitude")
Total <- read.csv("QueryMapData_v2.1.csv") # Lo, La, type1/2/3, value,icon,remark,zip
Total <- rbind(Total, Subway)
Total <- Total[,-1]
Total <- rbind(Total, Subway)
write.csv(Total,"QueryMapData_v2.2.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
sum(Total[,"Type1"=="Crime"])
sum(which(Total[,"Type1"=="Crime"]))
Total[,"Type1"=="Crime"]
sum(which(Total[,Type1]=="Crime"))
head(Total)
sum(which(Total[,"Type1"]=="Crime"))
sum(Total[,"Type1"]=="Crime")
runApp()
runApp()
runApp()
Total <- read.csv("QueryMapData_v2.1.csv") # Lo, La, type1/2/3, value,icon,remark,zip
Total <- Total[,-1]
Subway <- read.csv("NYC_subway.csv")
head(Total)
head(Subway)
Subway <- Subway[,c(2,3,4,5)]
Subway <- unique(Subway)
Subway$Remark <- paste(Subway$Line, " - ",Subway$Station.Name, "<br/>")
Subway <- Subway[,c("Station.Longitude","Station.Latitude","Remark")]
Subway$Type1 <- rep("Subway",nrow(Subway))
Subway$Type2 <- rep(NA,nrow(Subway))
Subway$Type3 <- rep(NA,nrow(Subway))
Subway$Value <- rep(NA,nrow(Subway))
Subway$Icon <- rep("Subway",nrow(Subway))
Subway$Zipcode <- rep(NA,nrow(Subway))
Subway <- Subway[,c(1,2,4,5,6,7,8,3,9)]
names(Subway)[c(1,2)] <- c("longitude","latitude")
Total <- rbind(Total, Subway)
write.csv(Total,"QueryMapData_v2.2.csv")
runApp()
Total <- read.csv("QueryMapData_v2.1.csv") # Lo, La, type1/2/3, value,icon,remark,zip
Subway <- read.csv("NYC_subway.csv")
head(Total)
Total <- Total[,-1]
Subway <- Subway[,c(2,3,4,5)]
Subway <- unique(Subway)
Subway$Remark <- paste(Subway$Line, " - ",Subway$Station.Name, "<br/>")
Subway <- Subway[,c("Station.Longitude","Station.Latitude","Remark")]
Subway$Type1 <- rep("Subway",nrow(Subway))
Subway$Type2 <- rep(NA,nrow(Subway))
Subway$Type3 <- rep(NA,nrow(Subway))
Subway$Value <- rep(NA,nrow(Subway))
Subway$Icon <- rep("Subway",nrow(Subway))
Subway$Zipcode <- rep(NA,nrow(Subway))
Subway <- Subway[,c(1,2,4,5,6,7,8,3,9)]
names(Subway)[c(1,2)] <- c("longitude","latitude")
Total <- rbind(Total, Subway)
write.csv(Total,"QueryMapData_v2.2.csv")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages(" shinythemes")
install.packages("shinythemes")
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
?themeSelector()
?theme
??theme
runApp()
runApp()
runApp()
runApp()
?textOutput
runApp()
?h3
??h3
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()

setwd("/Users/zx.xue/Desktop/Class/5243-Applied Data Science/HW2/Demo-for-Query-Map/app")
shiny::runApp()
shiny::runApp()
runApp()
install.packages("leaflet.minicharts")
new_data <- read_csv("crime_to_plot.csv")
new_data <- read.csv("crime_to_plot.csv")
library(leaflet)
library(leaflet.minicharts)
tilesURL <- "http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
basemap <- leaflet(width = "100%", height = "400px") %>%
addTiles(tilesURL)
colors = c("red", "orange", "yellow")
basemap %>%
addMinicharts(
new_data$LONG, new_data$LAT,
type = "pie",
chartdata = new_data[, c("FELONY", "MISDEMEANOR", "VIOLATION")],
colorPalette = colors,
width = 60 * sqrt(new_data$TOTAL) / sqrt(max(new_data$TOTAL)), transitionTime = 0
)
basemap %>%
addMinicharts(
new_data$LONG, new_data$LAT,
type = "pie",
chartdata = new_data[, c("FELONY", "MISDEMEANOR", "VIOLATION")],
colorPalette = colors,
width = 60 * sqrt(new_data$TOTAL) / sqrt(max(new_data$TOTAL)), transitionTime = 0
)
data_m <- read_csv("crime_clean_2.0.csv")
data_m <- read.csv("crime_clean_2.0.csv")
# crime by month
Month <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
data_plot <- data.frame(Month)
data_plot$VIOLATION <- NA
for (i in 1:12) {
data_plot$VIOLATION[i] <- length(data_m[(data_m$MONTH == i) &
(data_m$LAW_CAT_CD == "VIOLATION"), ]$Zipcode)
}
data_plot$FELONY <- NA
for (i in 1:12) {
data_plot$FELONY [i] <- length(data_m[(data_m$MONTH == i) &
(data_m$LAW_CAT_CD == "FELONY"), ]$Zipcode)
}
data_plot$MISDEMEANOR <- NA
for (i in 1:12) {
data_plot$MISDEMEANOR [i] <- length(data_m[(data_m$MONTH == i) &
(data_m$LAW_CAT_CD == "MISDEMEANOR"), ]$Zipcode)
}
data_plot$TOTAL <- data_plot$VIOLATION + data_plot$FELONY + data_plot$MISDEMEANOR
#plot
library("ggplot2")
ggplot(data = data_plot) +
geom_line(mapping = aes(x = Month, y = FELONY, group = 1, colour = "FELONY")) +
geom_line(mapping = aes(x = Month, y = MISDEMEANOR, group = 1, colour = "MISDEMEANOR")) +
geom_line(mapping = aes(x = Month, y = VIOLATION, group = 1, colour = "VIOLATION")) +
geom_line(mapping = aes(x = Month, y = TOTAL, group = 1, colour = "TOTAL")) +
scale_x_discrete(limits = month.abb) +
scale_colour_manual("",
breaks = c("TOTAL", "FELONY", "MISDEMEANOR", "VIOLATION"),
values = c("TOTAL"="purple", "FELONY"="red", "MISDEMEANOR"="orange",
"VIOLATION"="yellow")) +
labs(title = "Crime By Month", x = "Month", y = "Type Of Crime")
#  Pie chart
###Data Prep#####
crime_clean<-read.csv("crime_clean.csv")
#  Pie chart
###Data Prep#####
crime_clean<-read.csv("crime_clean_2.0.csv")
felony<-crime_clean[crime_clean$LAW_CAT_CD=="FELONY",]
mis<-crime_clean[crime_clean$LAW_CAT_CD=="MISDEMEANOR",]
vio<-crime_clean[crime_clean$LAW_CAT_CD=="VIOLATION",]
library(plyr)
table(felony$OFNS_DESC)
c_f<-as.data.frame(count(felony,"OFNS_DESC"))
c_m<-as.data.frame(count(mis,"OFNS_DESC"))
c_v<-as.data.frame(count(vio,"OFNS_DESC"))
top10_c_f<-head((c_f[order(c_f$freq,decreasing =TRUE),]),n=10)
top10_c_m<-head((c_m[order(c_f$freq,decreasing =TRUE),]),n=10)
top10_c_v<-head((c_v[order(c_f$freq,decreasing =TRUE),]),n=20)
###Plotting#####
library(ggplot2)
bpf<-ggplot(top10_c_f, aes(x="", y=freq, fill=OFNS_DESC))+
geom_bar(width = 1, stat = "identity")
pie_f <- bpf + coord_polar("y", start=0)+ggtitle("Felony")+
labs(y="frequency",fill='Crimes')
bpm<-ggplot(top10_c_m, aes(x="", y=freq, fill=OFNS_DESC))+
geom_bar(width = 1, stat = "identity")
pie_m <- bpm + coord_polar("y", start=0)+ggtitle("Misdemeanour")+
labs(y="frequency",fill='Crimes')
bpv<-ggplot(top10_c_v, aes(x="", y=freq, fill=OFNS_DESC))+
geom_bar(width = 1, stat = "identity")
pie_v <- bpv + coord_polar("y", start=0)+ggtitle("Violation")+
labs(y="frequency",fill='Crimes')
## Full plot ##
full<-as.data.frame(count(crime_clean,"LAW_CAT_CD"))
bp_full<-ggplot(full, aes(x="", y=freq, fill=LAW_CAT_CD))+
geom_bar(width = 1, stat = "identity")
pie_full<-bp_full+coord_polar("y",start = 0)+ggtitle("Distribution of Crimes by Law categorization")+
labs(y="frequency",fill='Crimes')+theme(legend.position="bottom")
###Putting all plots together####
library(gridExtra)
lay <- rbind(c(1,1,1,2,2),
c(1,1,1,3,3),
c(1,1,1,4,4))
grid.arrange(pie_full, pie_f, pie_m, pie_v, layout_matrix = lay)
Plot <- ggplot(data = data_plot) +
geom_line(mapping = aes(x = Month, y = FELONY, group = 1, colour = "FELONY")) +
geom_line(mapping = aes(x = Month, y = MISDEMEANOR, group = 1, colour = "MISDEMEANOR")) +
geom_line(mapping = aes(x = Month, y = VIOLATION, group = 1, colour = "VIOLATION")) +
geom_line(mapping = aes(x = Month, y = TOTAL, group = 1, colour = "TOTAL")) +
scale_x_discrete(limits = month.abb) +
scale_colour_manual("",
breaks = c("TOTAL", "FELONY", "MISDEMEANOR", "VIOLATION"),
values = c("TOTAL"="purple", "FELONY"="red", "MISDEMEANOR"="orange",
"VIOLATION"="yellow")) +
labs(title = "Crime By Month", x = "Month", y = "Type Of Crime")
data_m <- read.csv("crime_clean_2.0.csv")
# crime by month
Month <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
data_plot <- data.frame(Month)
data_plot$VIOLATION <- NA
for (i in 1:12) {
data_plot$VIOLATION[i] <- length(data_m[(data_m$MONTH == i) &
(data_m$LAW_CAT_CD == "VIOLATION"), ]$Zipcode)
}
data_plot$FELONY <- NA
for (i in 1:12) {
data_plot$FELONY [i] <- length(data_m[(data_m$MONTH == i) &
(data_m$LAW_CAT_CD == "FELONY"), ]$Zipcode)
}
data_plot$MISDEMEANOR <- NA
for (i in 1:12) {
data_plot$MISDEMEANOR [i] <- length(data_m[(data_m$MONTH == i) &
(data_m$LAW_CAT_CD == "MISDEMEANOR"), ]$Zipcode)
}
data_plot$TOTAL <- data_plot$VIOLATION + data_plot$FELONY + data_plot$MISDEMEANOR
#plot
library("ggplot2")
Plot <- ggplot(data = data_plot) +
geom_line(mapping = aes(x = Month, y = FELONY, group = 1, colour = "FELONY")) +
geom_line(mapping = aes(x = Month, y = MISDEMEANOR, group = 1, colour = "MISDEMEANOR")) +
geom_line(mapping = aes(x = Month, y = VIOLATION, group = 1, colour = "VIOLATION")) +
geom_line(mapping = aes(x = Month, y = TOTAL, group = 1, colour = "TOTAL")) +
scale_x_discrete(limits = month.abb) +
scale_colour_manual("",
breaks = c("TOTAL", "FELONY", "MISDEMEANOR", "VIOLATION"),
values = c("TOTAL"="purple", "FELONY"="red", "MISDEMEANOR"="orange",
"VIOLATION"="yellow")) +
labs(title = "Crime By Month", x = "Month", y = "Type Of Crime")
ggsave("CrimePlotByMonth.png",Plot)
runApp()
runApp()
runApp()
runApp()
runApp()
## Control Icon size and looks
new_data <- read.csv("crime_to_plot.csv")
tilesURL <- "http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
basemap <- leaflet(width = "100%", height = "400px") %>%
addTiles(tilesURL)
colors = c("red", "orange", "yellow")
basemap %>%
addMinicharts(
new_data$LONG, new_data$LAT,
type = "pie",
chartdata = new_data[, c("FELONY", "MISDEMEANOR", "VIOLATION")],
colorPalette = colors,
width = 60 * sqrt(new_data$TOTAL) / sqrt(max(new_data$TOTAL)), transitionTime = 0
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabPanel
runApp()
runApp()
?plotOutput
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
Total <- read.csv("QueryMapData_v2.2.csv") # Lo, La, type1/2/3,
head(Total)
sum(is.na(Total$longitude))
sum(is.na(Total$Zipcode))
House <- Total[Total$Type1=="Rent",]
head(House)
sum(is.na(House$Zipcode))
sum(is.na(House$longitude))
head(Total)
View(c_v)
for (i in 1:nrow(Total))
{
if (is.na(Total$longitude[i]))
{
Address <- as.character(Total$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Total[i, c("longitude","latitude")] <- gc
}
}
library(dplyr)
library(ggmap)
library(ggplot2)
library(ggmap)
for (i in 1:nrow(Total))
{
if (is.na(Total$longitude[i]))
{
Address <- as.character(Total$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Total[i, c("longitude","latitude")] <- gc
}
}
sum(is.na(House$Zipcode))
sum(is.na(House$longitude))
head(Total)
head(House)
for (i in 1:nrow(Total))
{
if (is.na(Total$longitude[i]))
{
Address <- as.character(Total$Remark[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Total[i, c("longitude","latitude")] <- gc
}
}
sum(is.na(Total$longitude))
for (i in 1:nrow(Total))
{
if (is.na(Total$longitude[i]))
{
Address <- as.character(Total$Remark[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Total[i, c("longitude","latitude")] <- gc
}
}
sum(is.na(Total$longitude))
for (i in 1:nrow(Total))
{
if (is.na(Total$Zipcode[i]))
{
#Address <- as.character(Total$Address[i])
gc <- as.numeric(c(Total$longitude[i], Total$latitude[i]))
res <- revgeocode(gc, output = "more")
if (length(res) > 1)
Total$ZipCode[i] <- as.character(res$postal_code)
Sys.sleep(0.1)
}
}
i
as.numeric(c(Total$longitude[i], Total$latitude[i]))
res
as.character(res$postal_code)
head(Total)
for (i in 1:nrow(Total))
{
if (is.na(Total$Zipcode[i]))
{
#Address <- as.character(Total$Address[i])
gc <- as.numeric(c(Total$longitude[i], Total$latitude[i]))
res <- revgeocode(gc, output = "more")
if (length(res) > 1)
Total$ZipCode[i] <- as.character(res$postal_code)
Sys.sleep(0.1)
}
}
head(Total)
sum(is.na(Total$longitude))
sum(is.na(Total$Zipcode))
write.csv(Total,"QueryMapData_v2.3.csv")
for (i in 1:nrow(Total))
{
if (is.na(Total$Zipcode[i]))
{
#Address <- as.character(Total$Address[i])
gc <- as.numeric(c(Total$longitude[i], Total$latitude[i]))
res <- revgeocode(gc, output = "more")
if (length(res) > 1)
Total$ZipCode[i] <- as.character(res$postal_code)
Sys.sleep(0.1)
}
}
Total <- read.csv("QueryMapData_v2.3.csv") # Lo, La, type1/2/3,
head(Total)
Total <- Total[,-1]
head(Total)
Total <- Total[,-1]
write.csv(Total,"QueryMapData_v2.3.csv")
for (i in 1:nrow(Total))
{
if (is.na(Total$Zipcode[i]))
{
#Address <- as.character(Total$Address[i])
gc <- as.numeric(c(Total$longitude[i], Total$latitude[i]))
res <- revgeocode(gc, output = "more")
if (length(res) > 1)
Total$ZipCode[i] <- as.character(res$postal_code)
Sys.sleep(0.1)
}
}
i
Total$ZipCode[i] <- as.character(res$postal_code)
as.character(res$postal_code)
Total$ZipCode[i]
Total$ZipCode[i] <- as.character(res$postal_code)
Total$Zipcode <- as.character(Total$Zipcode)
for (i in 1:nrow(Total))
{
if (is.na(Total$Zipcode[i]))
{
#Address <- as.character(Total$Address[i])
gc <- as.numeric(c(Total$longitude[i], Total$latitude[i]))
res <- revgeocode(gc, output = "more")
if (length(res) > 1)
Total$ZipCode[i] <- as.character(res$postal_code)
Sys.sleep(0.1)
}
}
Total$ZipCode[i] <- as.character(res$postal_code)
Total$ZipCode[i]
Total$ZipCode
for (i in 1:nrow(Total))
{
if (is.na(Total$Zipcode[i]))
{
#Address <- as.character(Total$Address[i])
gc <- as.numeric(c(Total$longitude[i], Total$latitude[i]))
res <- revgeocode(gc, output = "more")
if (length(res) > 1)
Total$Zipcode[i] <- as.character(res$postal_code)
}
}
sum(is.na(Total$Zipcode))
sum(is.na(Total$longitude))
for (i in 1:nrow(Total))
{
if (is.na(Total$Zipcode[i]))
{
#Address <- as.character(Total$Address[i])
gc <- as.numeric(c(Total$longitude[i], Total$latitude[i]))
res <- revgeocode(gc, output = "more")
if (length(res) > 1)
Total$Zipcode[i] <- as.character(res$postal_code)
}
}
sum(is.na(Total$Zipcode))
for (i in 1:nrow(Total))
{
if (is.na(Total$Zipcode[i]))
{
#Address <- as.character(Total$Address[i])
gc <- as.numeric(c(Total$longitude[i], Total$latitude[i]))
res <- revgeocode(gc, output = "more")
if (length(res) > 1)
Total$Zipcode[i] <- as.character(res$postal_code)
}
}
sum(is.na(Total$Zipcode))
write.csv(Total,"QueryMapData_v2.3.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tempfile(fileext = "total_pie.png")
img <- "total_pie.png"
img
png(img, width = 486, height = 300)
runApp()
?png
png(img, width = 486, height = 300)
dev.off()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderUI
runApp()
?titlePanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?img
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabsetPanel
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()

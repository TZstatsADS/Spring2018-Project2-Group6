if (is.na(Police$longitude[i]))
{
Address <- as.character(Police$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Police[i, c("longitude","latitude")] <- gc
Sys.sleep(0.05)
}
for (i in 1:nrow(Police))
if (is.na(Police$longitude[i]))
{
Address <- as.character(Police$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Police[i, c("longitude","latitude")] <- gc
Sys.sleep(0.05)
}
sum(is.na(Police$longitude))
for (i in 1:nrow(Police))
if (is.na(Police$longitude[i]))
{
Address <- as.character(Police$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Police[i, c("longitude","latitude")] <- gc
Sys.sleep(0.05)
}
sum(is.na(Police$longitude))
Police
Police[7,]
Police[7,"Address"]
Police[7,"Address"] <- paste(Police[7,"Address"], ", New York", sep = "")
Police$Address <- as.character(Police$Address)
Police[7,"Address"] <- paste(Police[7,"Address"], ", New York", sep = "")
Police[7,"Address"]
Police <- read.csv("dataNYPD.csv")
Police$Address <- as.character(Police$Address)
Police[7,"Address"] <- paste(Police[7,"Address"], ", New York", sep = "")
Police[7,"Address"]
for (i in 1:nrow(Police))
if (i==7)
{
Address <- as.character(Police$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Police[i, c("longitude","latitude")] <- gc
Sys.sleep(0.05)
}
Police[7,]
Police <- read.csv("dataNYPD.csv")
Police$Address <- as.character(Police$Address)
Police[7,"Address"] <- paste(Police[7,"Address"], ", New York", sep = "")
Police[7,]
Police$longitude <- rep(NA, nrow(Police))
Police$latitude <- rep(NA, nrow(Police))
for (i in 1:nrow(Police))
if (i==7)
{
Address <- as.character(Police$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Police[i, c("longitude","latitude")] <- gc
Sys.sleep(0.05)
}
Police[7,]
for (i in 1:nrow(Police))
if (i==7)
{
Address <- as.character(Police$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Police[i, c("longitude","latitude")] <- gc
Sys.sleep(0.05)
}
for (i in 1:nrow(Police))
if (i==7)
{
Address <- as.character(Police$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Police[i, c("longitude","latitude")] <- gc
Sys.sleep(0.05)
}
Police[7,]
for (i in 1:nrow(Police))
if (is.na(Police$longitude[i]))
{
Address <- as.character(Police$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Police[i, c("longitude","latitude")] <- gc
Sys.sleep(0.05)
}
sum(is.na(Police$longitude))
for (i in 1:nrow(Police))
if (is.na(Police$longitude[i]))
{
Address <- as.character(Police$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Police[i, c("longitude","latitude")] <- gc
Sys.sleep(0.05)
}
for (i in 1:nrow(Police))
if (is.na(Police$longitude[i]))
{
Address <- as.character(Police$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Police[i, c("longitude","latitude")] <- gc
Sys.sleep(0.05)
}
sum(is.na(Police$longitude))
for (i in 1:nrow(Police))
if (is.na(Police$longitude[i]))
{
Address <- as.character(Police$Address[i])
gc <- as.numeric(geocode(Address))
if (length(gc) > 1)
Police[i, c("longitude","latitude")] <- gc
Sys.sleep(0.05)
}
Police
head(Total)
Police
Police$Address2 <- paste(Police$Area, "<br/>", Police$Address, sep = "")
Police
Police$Type1 <- rep("Police", nrow(Police))
Police$Type2 <- rep(NA, nrow(Police))
Police$Type3 <- rep(NA, nrow(Police))
Police$Value <- rep(NA, nrow(Police))
Police$Icon <- rep("Police", nrow(Police))
Police$Remark <- paste(Police$Area, "<br/>", Police$Address, sep = "")
Police$Zipcode <- rep(NA, nrow(Police))
Police
Police <- Police[,c(3,4,6,7,8,9,10,11,12)]
Police
head(Total)
Total <- rbind(Total, Police)
write.csv(Total,"QueryMapData_v2.4.csv")
#Add Hospital
Hospital <- read.csv <- ("dataHospitals.csv")
Hospital
#Add Hospital
Hospital <- read.csv("dataHospitals.csv")
head(Hospital)
Hospital <- Hospital[Hospital$Borough == "Manhattan",]
head(Hospital)
Hospital
strsplit("A","ABABANJABBA")
strsplit("ABABANJABBA","A")
strsplit(Hospital$Location.1[1], "\n")
Hospital$Location.1 <- as.character(Hospital$Location.1)
strsplit(Hospital$Location.1[1], "\n")
for (i in nrow(Hospital))
Hospital$Location.1[i] <- strsplit(Hospital$Location.1[i], "\n")[[3]]
for (i in nrow(Hospital))
Hospital$Location.1[i] <- strsplit(Hospital$Location.1[i], "\n")[[2]]
for (i in nrow(Hospital))
Hospital$Location.1[i] <- strsplit(Hospital$Location.1[i], "\n")[[1]]
Hospital$Location.1
nrow(Hospital)
#Add Hospital
Hospital <- read.csv("dataHospitals.csv")
Hospital <- Hospital[Hospital$Borough == "Manhattan",]
Hospital$Location.1 <- as.character(Hospital$Location.1)
Hospital$Location.1
for (i in nrow(Hospital))
Hospital$Location.1[i] <- strsplit(Hospital$Location.1[i], "\n")[[3]]
Hospital$Location.1
i=1
strsplit(Hospital$Location.1[i], "\n")[[3]]
strsplit(Hospital$Location.1[i], "\n")
for (i in nrow(Hospital))
Hospital$Location.1[i] <- strsplit(Hospital$Location.1[i], "\n")[[1]][3]
Hospital$Location.1
i
i=1
#Add Hospital
Hospital <- read.csv("dataHospitals.csv")
Hospital <- Hospital[Hospital$Borough == "Manhattan",]
Hospital$Location.1 <- as.character(Hospital$Location.1)
for (i in 1:nrow(Hospital))
Hospital$Location.1[i] <- strsplit(Hospital$Location.1[i], "\n")[[1]][3]
Hospital$Location.1
A <- "12335"
A[-1]
A[-1]\
Hospital$longitude <- rep(NA, nrow(Hospital))
Hospital$latitude <- rep(NA, nrow(Hospital))
for (i in 1:nrow(Hospital))
{
Hospital$longitude[i] <- strsplit(Hospital$Location.1[i], ",")[[1]][1]
Hospital$latitude[i] <- strsplit(Hospital$Location.1[i], ",")[[1]][2]
}
Hospital
write(Hospital, "dataHospitals2.csv")
write.csv(Hospital, "dataHospitals2.csv")
for (i in 1:nrow(Hospital))
{
Hospital$longitude[i] <- strsplit(Hospital$longitude[i], "(")[[1]][2]
Hospital$latitude[i] <- strsplit(Hospital$latitude[i], ")")[[1]][1]
}
Hospital
Hospital
for (i in 1:nrow(Hospital))
{
Hospital$longitude[i] <- strsplit(Hospital$longitude[i], "\(")[[1]][2]
A <= "1233(555"
A <- "1233(555"
strsplit(A,"(")
strsplit(A,"\(")
strsplit(A,"\\(")
for (i in 1:nrow(Hospital))
{
Hospital$longitude[i] <- strsplit(Hospital$longitude[i], "\\(")[[1]][2]
Hospital$latitude[i] <- strsplit(Hospital$latitude[i], "\\)")[[1]][1]
}
Hospital$longitude
Hospital$latitude
for (i in 1:nrow(Hospital))
{
Hospital$longitude[i] <- round(as.numeric(Hospital$longitude[i]),6)
Hospital$latitude[i] <- round(as.numeric(Hospital$latitude[i]),6)
}
Hospital
unique(Hospital$Location.1)
which(unique(Hospital$Location.1))
unique(Hospital$Location.1)
Hospital
Hospital <- Hospital[-c(1,2,15,16,18,20,21,23),]
Hospital
unique(Hospital$Location.1)
Hospital$longitude
write.csv(Hospital, "dataHospitals2.csv")
names(Hospital)
names(Hospital)[7]
names(Hospital)[c(7,8)] <- c("latitude","longitude")
names(Hospital)
Hospital$Type1 <- rep("Hospital", nrow(Hospital))
Hospital$Type2 <- rep(NA, nrow(Hospital))
Hospital$Type3 <- rep(NA, nrow(Hospital))
Hospital$Value <- rep(NA, nrow(Hospital))
Hospital$Icon <- rep("Hospital", nrow(Hospital))
Hospital
Hospital$Remark <- paste(Hospital$Facility.Name, "<br/>", Hospital$Facility.Type, sep = "")
Hospital$Zipcode <- rep(NA, nrow(Hospital))
Hospital
names(Hospital)
Hospital <- Hospital[,c(8,7,9,10,11,12,13,14,15)]
Hospital
Total <- rbind(Total, Hospital)
write.csv(Total,"QueryMapData_v2.5.csv")
runApp()
runApp()
## subset the data
Data <- read.csv("QueryMapData_v2.5.csv")
tmp <- subset(tmp, (Type1 == "Rent" | Type1 == "Crime"))
tmp <- subset(Data, (Type1 == "Rent" | Type1 == "Crime"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#index = match(input$commodity_2D,c('Housing Rent', 'Crime','Mouse'))
#Labels = c("House","Crime","Mouse")
##### end subset
flag <- 0
if (flag == 0)
{
leaflet(tmp)%>%addProviderTiles("Esri.WorldStreetMap")%>%
addMarkers(clusterOptions = markerClusterOptions(),
popup = ~rank, icon = ~levelIcon[Icon])%>%
setView(lng = -73.966991,lat = 40.781489, zoom=13)#put Central Park in the centre
flag <- 1
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addCircleMarkers
runApp()
runApp()
?map.getCenter
??map.getCenter
runApp()
runApp()
runApp()
capitalize("hsdHsudiIIOw")
toupper("sdhUhsuK")
A <- c("111","222","333")
"222" = A
"222" == A
any("222" == A)
any("223" == A)
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
tmp$Remark[tmp$Type1 == "Hospital"]
tmp$rank[tmp$Type1 == "Hospital"]
runApp()
runApp()
toupper("sdf","fgdgd")
toupper("sdf")
toupper("sdf","fgdgd")
toupper(c("sdf","fgdgd"))
runApp()
runApp()
runApp()
tmp$Type2
table(tmp$Type2)
runApp()
runApp()
shiny::runApp()
runApp()
load("./heatmap/heatmap_3.rda")
plot_ly(z=heatmap8_3)
plotly::plot_ly(z=heatmap8_3)
library(plotly)
library(ggplot2)
library(plotly)
runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo-for-Query-Map/app')
runApp()
load("./heatmap/heatmap_3.rda")
plot_ly(z = heatmap8_3)
runApp()
runApp()
runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo-for-Query-Map/app')
runApp()
runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo-for-Query-Map/app')
runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo-for-Query-Map/app')
runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo-for-Query-Map/app')
runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo-for-Query-Map/app')
load("./heatmap/heatmap_3.rda")
plot_ly(z = heatmap8_3)
runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo-for-Query-Map/app')
runApp()
runApp()
runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo-for-Query-Map/app')
runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo-for-Query-Map/app')
runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo-for-Query-Map/app')
runApp('~/Documents/GitHub/Spring2018-Project2-group6/app/Demo-for-Query-Map/app')
runApp()
runApp()
load("./heatmap/heatmap_3.rda")
plot_ly(z = heatmap8_3)
runApp()
runApp()
runApp()
runApp()
z <- load("./heatmap/heatmap_3.rda")
z
zz <- load("./heatmap/heatmap_3.rda")
plot_ly(zz)
zz
zz[1]
load("./heatmap/heatmap_3.rda")
View(heatmap8_3)
runApp()
plot_ly(z = heatmap8_3,type="heatmap")
runApp()
?plot_ly
runApp()
p <- plot_ly(z = heatmap8_3,type="heatmap")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot_ly
?plotlyOutput
runApp()
runApp()
runApp()
runApp()
runApp()
load("./heatmap/heatmap_5.rda")
load("./heatmap/heatmap_10.rda")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabsetPanel
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
house2 <- read.csv("house2.csv")
head(house2)
Area = factor(house2$area)
Area
head(house2)
runApp()
runApp()
house2 <- read.csv("house2.csv")
house2$area <- as.character(house2$area)
tmp <- NA
runApp()
A <- c(""Central Harlem","Chelsea and Clinton",
"East Harlem","Gramercy Park and Murray Hill",
"Greenwich Village and Soho"")
A <- c(""Central Harlem","Chelsea and Clinton", "East Harlem","Gramercy Park and Murray Hill","Greenwich Village and Soho"")
A <- c("Central Harlem","Chelsea and Clinton", "East Harlem","Gramercy Park and Murray Hill","Greenwich Village and Soho"")
"
A <- c("Central Harlem","Chelsea and Clinton", "East Harlem","Gramercy Park and Murray Hill","Greenwich Village and Soho")
for (i in A)
{
tmp <- rbind(tmp, house2[house2$area == i,c("crime", "Value", "area")])
}
View(tmp)
tmp <- tmp[-1,]
View(tmp)
Area = factor(tmp$area)
Area
p <- ggplot(tmp, aes(x = crime, y = Value,color = Area)) + geom_point()
p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
house2 <- read.csv("house2.csv")
ggplot(house2, aes(x = crime, y = Value,color = area)) + geom_point()
runApp()
plot(house2, aes(x = crime, y = Value,color = area))
runApp()
runApp()
runApp()
runApp()
runApp()
?tabPanel
?tabsetPanel
?tabBox
??tabBox
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
?verbatimTextOutput
runApp()
?renderText
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
